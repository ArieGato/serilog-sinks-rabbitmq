name: Publish release

on:
  release:
    types:
      - published

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup .NET SDKs
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          6.0.x
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution [Release]
      run: dotnet build --no-restore -c Release

    - name: Pack solution [Release]
      run: dotnet pack --no-build -c Release -o dist/packages

    - name: Upload artifacts
      uses: actions/upload-artifact@v5
      with:
        name: nuget-packages
        path: dist/packages

    - name: Publish Nuget to nuget.org registry
      run: dotnet nuget push ./dist/packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    - name: Upload Nuget packages as release artifacts
      uses: actions/github-script@v8
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('environment', process.versions);
          const fs = require('fs').promises;
          const { repo: { owner, repo }, sha } = context;

          for (let file of await fs.readdir('./dist/packages')) {
            console.log('uploading', file);

            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: ${{ github.event.release.id }},
              name: file,
              data: await fs.readFile(`./dist/packages/${file}`)
            });
          }
